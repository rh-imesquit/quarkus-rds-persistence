---
- name: Remover VPC, IAM, RDS e Bastion na AWS (destroy all)
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - vault.yml

  collections:
    - amazon.aws

  vars:
    aws_region: sa-east-1
    vpc_name: music-api-vpc

    subnet_a_cidr:      10.1.1.0/24
    subnet_b_cidr:      10.1.2.0/24
    public_subnet_cidr: 10.1.3.0/24

    rds_db_subnet_group: "{{ vpc_name }}-subnet-group"
    rds_instance_id:     music-api-db
    sg_rds_name:         music-api-rds-sg
    sg_bastion_name:     music-api-bastion-sg
    iam_user:            rds_lab_user
    iam_policy_name:     RDSLabPolicy
    iam_role_name:       RDSLabRole
    bastion_key_name:    aws-bastion-key

  tasks:
    - name: Gather AWS caller identity
      amazon.aws.aws_caller_info:
      register: aws_caller

    # 1) Bastion teardown
    - name: Find Bastion instances
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": ["bastion-host"]
      register: bastion_info

    - name: Terminate Bastion instances
      amazon.aws.ec2_instance:
        instance_ids: "{{ bastion_info.instances | map(attribute='instance_id') | list }}"
        state: absent
        wait: yes
        region: "{{ aws_region }}"
      when: bastion_info.instances | length > 0

    - name: Delete Bastion key pair
      amazon.aws.ec2_key:
        name: "{{ bastion_key_name }}"
        state: absent
        region: "{{ aws_region }}"

    - name: Delete Bastion security group
      amazon.aws.ec2_security_group:
        name: "{{ sg_bastion_name }}"
        state: absent
        region: "{{ aws_region }}"

    # 2) RDS teardown
    - name: Delete RDS instance
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ rds_instance_id }}"
        state: absent
        skip_final_snapshot: true
        wait: yes

    - name: Delete RDS subnet group
      amazon.aws.rds_subnet_group:
        name: "{{ rds_db_subnet_group }}"
        state: absent

    - name: Delete RDS security group
      amazon.aws.ec2_security_group:
        name: "{{ sg_rds_name }}"
        state: absent
        region: "{{ aws_region }}"

    # 3) Find VPC
    - name: Find VPC by tag
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": ["{{ vpc_name }}"]
      register: vpc_info

    # 4) Route Tables teardown (somente as nÃ£o-principais)
    - name: Find all route tables in VPC
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
      register: all_route_tables

    - name: Purge and delete each non-main route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        route_table_id: "{{ item.route_table_id }}"
        purge_subnets: yes
        purge_routes: yes
        state: absent
      loop: "{{ all_route_tables.route_tables }}"
      loop_control:
        label: "{{ item.route_table_id }}"
      when: >
        (item.associations | selectattr('main','equalto',true) | list) == []

    # 5) Subnets teardown (busca por CIDR)
    - name: Find Subnets by CIDR
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
          cidr-block: "{{ item }}"
      loop:
        - "{{ subnet_a_cidr }}"
        - "{{ subnet_b_cidr }}"
        - "{{ public_subnet_cidr }}"
      register: found_subnets

    - name: Delete each Subnet found
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ item.subnets[0].vpc_id }}"
        cidr: "{{ item.subnets[0].cidr_block }}"
        state: absent
        region: "{{ aws_region }}"
      loop: "{{ found_subnets.results }}"
      when: item.subnets | length > 0

    # 6) Internet Gateways teardown
    - name: Find IGWs attached to VPC
      amazon.aws.ec2_vpc_igw_info:
        filters:
          "attachment.vpc-id": "{{ vpc_info.vpcs[0].vpc_id }}"
      register: igw_info

    - name: Delete each Internet Gateway
      amazon.aws.ec2_vpc_igw:
        internet_gateway_id: "{{ item.internet_gateway_id }}"
        state: absent
      loop: "{{ igw_info.internet_gateways }}"

    # 7) ENIs cleanup
    - name: Find ENIs in VPC
      amazon.aws.ec2_eni_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
      register: enis

    - name: Delete leftover ENIs
      amazon.aws.ec2_eni:
        network_interface_id: "{{ item.network_interface_id }}"
        state: absent
      loop: "{{ enis.network_interfaces }}"
      when: enis.network_interfaces | length > 0

    # 8) IAM teardown
    - name: Delete IAM user
      amazon.aws.iam_user:
        name: "{{ iam_user }}"
        state: absent

    - name: Delete IAM role
      amazon.aws.iam_role:
        name: "{{ iam_role_name }}"
        state: absent

    - name: Delete IAM managed policy
      amazon.aws.iam_managed_policy:
        name: "{{ iam_policy_name }}"
        state: absent

    # 9) Finally delete the VPC (inclui a _main_ RT automaticamente)
    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        state: absent
        region: "{{ aws_region }}"
      register: delete_vpc

    - name: "Fallback: show delete VPC error"
      debug:
        var: delete_vpc
      when: delete_vpc.failed
