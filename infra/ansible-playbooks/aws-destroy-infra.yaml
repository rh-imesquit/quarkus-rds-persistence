---
- name: "Remover VPC, IAM, RDS e Bastion da AWS"
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - vault.yml
  collections:
    - amazon.aws

  vars:
    aws_region: sa-east-1
    vpc_name: music-api-vpc
    subnet_a_tag: music-api-subnet-a
    subnet_b_tag: music-api-subnet-b
    public_subnet_tag: music-api-public-subnet-a
    public_rt_tag: public-rt
    rds_db_subnet_group: "{{ vpc_name }}-subnet-group"
    rds_instance_id: music-api-db
    sg_rds_name: music-api-rds-sg
    sg_bastion_name: music-api-bastion-sg
    iam_user: quarkus_rds_user
    iam_policy_name: QuarkusRDSPolicy
    iam_role_name: QuarkusRDSRole
    bastion_key_name: aws-bastion-key

  tasks:
    - name: "Gather AWS caller identity"
      amazon.aws.aws_caller_info:
      register: aws_caller

    - name: "Localizar instância Bastion"
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": ["bastion-host"]
      register: bastion_info

    - name: "Terminar instância Bastion"
      amazon.aws.ec2_instance:
        instance_ids: "{{ bastion_info.instances | map(attribute='instance_id') | list }}"
        state: absent
        wait: yes
        region: "{{ aws_region }}"
      when: bastion_info.instances | length > 0

    - name: "Deletar Security Group do Bastion"
      amazon.aws.ec2_security_group:
        name: "{{ sg_bastion_name }}"
        state: absent
        region: "{{ aws_region }}"

    - name: "Deletar Key Pair do Bastion"
      amazon.aws.ec2_key:
        name: "{{ bastion_key_name }}"
        state: absent
        region: "{{ aws_region }}"

    - name: "Deletar instância RDS MySQL"
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ rds_instance_id }}"
        state: absent
        skip_final_snapshot: true
        wait: yes

    - name: "Deletar DB Subnet Group"
      amazon.aws.rds_subnet_group:
        name: "{{ rds_db_subnet_group }}"
        state: absent

    - name: "Deletar Security Group para RDS"
      amazon.aws.ec2_security_group:
        name: "{{ sg_rds_name }}"
        state: absent
        region: "{{ aws_region }}"

    - name: "Localizar Subnet AZ-a"
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          "tag:Name": ["{{ subnet_a_tag }}"]
      register: subnets_a

    - name: "Deletar Subnet AZ-a"
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ subnets_a.subnets[0].vpc_id }}"
        cidr: "{{ subnets_a.subnets[0].cidr_block }}"
        state: absent
        region: "{{ aws_region }}"
      when: subnets_a.subnets | length > 0

    - name: "Localizar Subnet AZ-b"
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          "tag:Name": ["{{ subnet_b_tag }}"]
      register: subnets_b

    - name: "Deletar Subnet AZ-b"
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ subnets_b.subnets[0].vpc_id }}"
        cidr: "{{ subnets_b.subnets[0].cidr_block }}"
        state: absent
        region: "{{ aws_region }}"
      when: subnets_b.subnets | length > 0

    - name: "Localizar Public Subnet"
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          "tag:Name": ["{{ public_subnet_tag }}"]
      register: subnets_pub

    - name: "Deletar Public Subnet"
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ subnets_pub.subnets[0].vpc_id }}"
        cidr: "{{ subnets_pub.subnets[0].cidr_block }}"
        state: absent
        region: "{{ aws_region }}"
      when: subnets_pub.subnets | length > 0

    - name: "Localizar VPC ID"
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": ["{{ vpc_name }}"]
      register: vpc_info

    - name: "Localizar Route Tables Públicas"
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
          tag:Name: ["{{ public_rt_tag }}"]
      register: rt_info

    - name: "Purgar rotas de cada Route Table Pública"
      amazon.aws.ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ item.vpc_id }}"
        route_table_id: "{{ item.route_table_id }}"
        purge_routes: yes
      loop: "{{ rt_info.route_tables }}"
      when: rt_info.route_tables | length > 0

    - name: "Deletar cada Route Table Pública"
      amazon.aws.ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ item.vpc_id }}"
        route_table_id: "{{ item.route_table_id }}"
        state: absent
      loop: "{{ rt_info.route_tables }}"
      when: rt_info.route_tables | length > 0

    - name: "Localizar Internet Gateway atrelado"
      amazon.aws.ec2_vpc_igw_info:
        filters:
          "attachment.vpc-id": "{{ vpc_info.vpcs[0].vpc_id }}"
      register: igw_info

    - name: "Deletar Internet Gateway"
      amazon.aws.ec2_vpc_igw:
        region: "{{ aws_region }}"
        internet_gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
        state: absent
      when: igw_info.internet_gateways | length > 0

    - name: "Deletar IAM User"
      amazon.aws.iam_user:
        name: "{{ iam_user }}"
        state: absent

    - name: "Deletar IAM Role"
      amazon.aws.iam_role:
        name: "{{ iam_role_name }}"
        state: absent

    - name: "Deletar IAM Managed Policy"
      amazon.aws.iam_managed_policy:
        name: "{{ iam_policy_name }}"
        state: absent

    - name: "Localizar ENIs na VPC"
      amazon.aws.ec2_eni_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
      register: enis

    - name: "Deletar todas as ENIs restantes"
      amazon.aws.ec2_eni:
        network_interface_id: "{{ item.network_interface_id }}"
        state: absent
      loop: "{{ enis.network_interfaces }}"
      when: enis.network_interfaces | length > 0

    - name: "Deletar VPC"
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
        state: absent
        region: "{{ aws_region }}"
      register: delete_vpc

    - name: "Fallback: mostrar erro se VPC não for excluída"
      debug:
        var: delete_vpc
      when: delete_vpc.failed
